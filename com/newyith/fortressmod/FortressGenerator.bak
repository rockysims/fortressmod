package com.newyith.fortressmod;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class FortressGeneratorBak extends Block {

    @SideOnly(Side.CLIENT)
    private IIcon top;
    @SideOnly(Side.CLIENT)
    private IIcon front;
    
    private static boolean isBurning;
    private final boolean isBurning2;
    private final Random random = new Random();
    
    protected FortressGeneratorBak(boolean isActive) {
        super(Material.rock);
        isBurning2 = isActive;
    }

    @SideOnly(Side.CLIENT)
    public void registerBlockIcons(IIconRegister iconregister) {
        this.blockIcon = iconregister.registerIcon(BasicInfo.MODID + ":FortressGeneratorSide");
        if (this.isBurning2) {
            this.front = iconregister.registerIcon(BasicInfo.MODID + ":FortressGeneratorActive");
        } else {
            this.front = iconregister.registerIcon(BasicInfo.MODID + ":FortressGeneratorInactive");
        }
        this.top = iconregister.registerIcon(BasicInfo.MODID + ":FortressGeneratorTop");
    }

    public IIcon getIcon(int side, int meta) {
        if (side == 1) { //top
            return top;
        } else if (side == 3) { //front
            return front;
        } else {
            return this.blockIcon;
        }
    }
    
    public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int par6, float par7, float par8, float par9) {
        //player.openGui(FortressMod.modInstance, 0, world, x, y, z);
        return true;
    }
    
    public Item getItemDropped(int par1, Random random, int par3) {
        return Item.getItemFromBlock(FortressMod.fortressGenerator);
    }
    
    public Item getItem(World world, int par2, int par3, int par4) {
        return Item.getItemFromBlock(FortressMod.fortressGenerator);
    }
    
    @SideOnly(Side.CLIENT)
    public void onBlockAdded(World world, int x, int y, int z) {
        super.onBlockAdded(world, x, y, z);
        this.direction(world, x, y, z);
    }

    private void direction(World world, int x, int y, int z) {
        if (!world.isRemote) {
            Block block0 = world.getBlock(x, y, z+1);
            Block block1 = world.getBlock(x, y, z-1);
            Block block2 = world.getBlock(x+1, y, z);
            Block block3 = world.getBlock(x-1, y, z);
            byte byte0 = 3;
            
            if (block0.isOpaqueCube()) {
                byte0 = 3;
            }
            if (block1.isOpaqueCube()) {
                byte0 = 2;
            }
            if (block2.isOpaqueCube()) {
                byte0 = 5;
            }
            if (block3.isOpaqueCube()) {
                byte0 = 4;
            }
            
            world.setBlockMetadataWithNotify(x, y, z, byte0, 2);
        }
    }

    public void onBlockPlaceBy(World world, int x, int y, int z, EntityLivingBase entity, ItemStack itemStack) {
        int direction = MathHelper.floor_double((double)(entity.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;

        if (direction == 0) {
            world.setBlockMetadataWithNotify(x, y, z, 2, 2);
        }
        
        if (direction == 1) {
            world.setBlockMetadataWithNotify(x, y, z, 5, 2);
        }
        
        if (direction == 2) {
            world.setBlockMetadataWithNotify(x, y, z, 3, 2);
        }

        if (direction == 3) {
            world.setBlockMetadataWithNotify(x, y, z, 4, 2);
        }
        
        if (itemStack.hasDisplayName()) {
            //((TileEntityFortressGenerator) world.getTileEntity(x, y, z)).func_145951_a(itemStack.getDisplayName());
        }
    }
}
